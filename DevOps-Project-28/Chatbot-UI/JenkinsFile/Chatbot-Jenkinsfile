pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node19'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
    }
    stages {
        stage('Checkout from Git') {
            steps {
                git branch: 'master', url: 'https://github.com/ngombigue/DevOps-Projects.git'
            }
        }
        stage('Install Dependencies') {
            steps {
                // Se déplacer dans le répertoire contenant package.json avant d'exécuter npm install
                dir('DevOps-Project-28/Chatbot-UI') {
                    sh 'npm install'
                }
            }
        }
        stage("Sonarqube Analysis") {
            steps {
                withSonarQubeEnv('sonar-server') {
                    sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=Chatbot \
                    -Dsonar.projectKey=Chatbot'''
                }
            }
        }
        stage("Quality Gate") {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'Sonar-token'
                }
            }
        }
        stage('OWASP FS SCAN') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --disableYarnAudit --disableNodeAudit', odcInstallation: 'DP-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('TRIVY FS SCAN') {
            steps {
                sh 'trivy fs . > trivyfs.json'
            }
        }
        stage("Docker Build & Push") {
            steps {
                script {
                    withDockerRegistry(credentialsId: 'docker', toolName: 'docker') {
                        sh 'docker build -t chatbot .'
                        sh 'docker tag chatbot ngombig/chatbot:latest'
                        sh 'docker push ngombig/chatbot:latest'
                    }
                }
            }
        }
        stage("TRIVY") {
            steps {
                sh 'trivy image ngombig/chatbot:latest > trivy.json'
            }
        }
        stage("Remove container") {
            steps {
                sh 'docker stop chatbot || true'
                sh 'docker rm chatbot || true'
            }
        }
        stage('Deploy to container') {
            steps {
                sh 'docker run -d --name chatbot -p 3000:3000 ngombig/chatbot:latest'
            }
        }
    }
}
